/* 

 * The BillingSystem case study, specified for educational and research purposes, and associated to the set of papers 
 * "Linguistic Patterns and Linguistic Styles for Requirements Specification: Focus on Data Entities and Use Cases"
 * 
 * Defined with the RSL v.2020 Language  
 * 
 * Author: Alberto Rodrigues da Silva
 * 
 * Created Date: 2020/May
 * Last Update:  2020/October
 */
  
 
Package BillingSystem 
  

Import p_BillingB.Billing_Business.*   

Import StandardLibrary.Actions.*
Import StandardLibrary.Actors.* 
Import StandardLibrary.Stakeholders.*


/******************************************************** 
   System definition  
*********************************************************/ 

System Billing_App_v5 "BillingSystem (Application Level)" : Application [ isFinal  
  description 
"
BillingSystem is a system that allows users to manage customers, products and invoices. 
A user of the system is someone that has a user account and is assigned to user roles, such as operator, manager and administrator.

User-administrator shall be responsible for managing users, configuring technical features (e.g., user roles, export configuration parameters, 
general enterprise information). System shall allow user-administrator to register users. During this process the administrator shall specify 
first and last name of the user, email address, and username. User password shall be automatically generated by the system and sent to its user email.

User-operator is responsible for managing customers and invoices. User-operator shall create/update information related to customers and invoices. 
For each customer the system shall maintain the following information: name, fiscal id, logo image, address, bank information and additional information 
such as basic person contact information. System shall allow user-operator to define some customers as VIP. If a customer is defined as VIP, for each of her invoice, 
the system shall allow user-operator to set a predefined discount tax. That amount of discount can change throughout the time and depends on 
the current policy of the company. For each product the system shall maintain the following information: name, description, price, VAT category, and VAT value. 
Product must have only one VAT category and maintain the respective current VAT value.

User-operator shall create new invoices (with respective invoice details). However, before sending an invoice to a customer, the invoice shall be formally approved 
by the user-manager. Only after such approval, the user-operator shall issue and send that invoice electronically by e-mail and by regular post. In addition, 
for each invoice, the user-operator needs to keep track if it is paid or not. 

The System shall automatically alert the user-manager, for all the invoices that were sent to customers but not yet paid, after 30 days of their respective issue date.  
In the beginning of each year the System shall archive and send to the ERP-System all paid invoices of the last year. [...]
"]


/********************************************************
   DataEntities view
*********************************************************/  

DataEnumeration SizeKind values (Small, REG "Regular", Large, ExtraLarge)
DataEnumeration UserRoleKind values (Admin, Manager, Operator, Customer)  
DataEnumeration InvoiceStatusKind values (PEND "Pending", Approved, REJ "Rejected", Issued, Paid, Deleted)   
DataEnumeration VATRateKind values (Standard, Reduced, Special)   

DataEntity e_VAT "VAT Category" : Reference [  
  attribute Code "Code" : Integer [constraints (PrimaryKey)]
  attribute Rate "Rate" : DataEnumeration VATRateKind [constraints (NotNull)] 
  attribute Name "Name" : String(30)
  attribute Value "Value" : Decimal(2.1) [constraints (NotNull)] 
  description "VAT Categories"]   
  
/* 
DataEntity e_Product "Product" : Master [
  attribute ID : Integer [constraints (PrimaryKey)]
  attribute Name : String(50) [constraints (multiplicity "1..2")]
  attribute VATCode : Integer [constraints (NotNull ForeignKey (e_VAT))]
  attribute VATValue : Decimal(2.2) [constraints (NotNull Derived ("e_VAT.VATValue") )]
  attribute valueWithoutVAT "Price Without VAT" : Decimal(16.2) [constraints (NotNull) ]
  attribute valueWithVAT "Price With VAT" : Decimal(16.2) [constraints (NotNull Derived ("self.valueWithoutVAT * (1 + self.VATValue)") ) ]
  attribute size : DataEnumeration SizeKind
  description "Products"]  
*/

DataEntity e_Product "Product" : Master [
  attribute ID : Integer [constraints (PrimaryKey)]
  attribute Name : String(50) [constraints (multiplicity "1..2")]
  attribute VATCode : Integer [constraints (NotNull ForeignKey (e_VAT))]
  attribute VATValue : Decimal [constraints (NotNull Derived ("e_VAT.VATValue") )]
  attribute Value "Price Without VAT" : Decimal(16.2) [constraints (NotNull) ]
  attribute ValueWithVAT "Price With VAT" : Decimal(16.2) [constraints (NotNull Derived ("Value * (1+VATValue)") ) ]
  attribute size : DataEnumeration SizeKind
  description "Products"]  


DataEntity e_Customer "Customer" : Master [ 
  attribute ID "Customer ID" : Integer [constraints (PrimaryKey)]
  attribute Name "Name" : String(50) [constraints (NotNull)]
  attribute fiscalID "Fiscal ID" : String(14) [helpMessage "Customer's Fiscal Id" constraints (NotNull Unique) ]
  attribute BankID "Bank ID" : Regex [helpMessage "IBAN of customer's bank account" constraints (Check (ck_BankID "ValidBankID(BankID)"))] 
  attribute email "Email" : Email
  attribute phone "Phone #" : String(15) [constraints (NotNull)]
  attribute image "Image" : Image
  constraints ( Encrypted Check (ck_Customer1 "ValidFiscalID(fiscalID)") )
  description "Customers"]

DataEntity e_CustomerVIP "CustomerVIP" : Master [ 
  isA e_Customer
  attribute discountRate "Discount Rate" : Decimal [defaultValue "20%" ]
  constraints (Encrypted)
  description "Customers VIP"]


DataEntity e_Invoice "Invoice" : Document: Regular [
  attribute ID "Invoice ID" : Integer [constraints (PrimaryKey)]
  attribute customer : Integer [constraints (NotNull ForeignKey (e_Customer onDelete PROTECT))]
  attribute creationDate "Creation Date" : Date [defaultValue "today" constraints (NotNull)]
  attribute approvalDate "Approval Date" : Date
  attribute dateIssue "Issue Date" : Date
  attribute paidDate "Payment Date" : Date
  attribute Status : DataEnumeration InvoiceStatusKind 
  attribute Value "Total Value Without VAT" : Decimal(16.2) 
   [constraints (NotNull Derived ("Sum all InvoiceLine->Value of current invoice"))]
  attribute ValueWithVAT "Total Value With VAT" : Decimal(16.2) 
   [constraints (NotNull Derived ("Sum all InvoiceLine->ValueWithVAT of current invoice"))] ]

DataEntity e_InvoiceLine "Invoice Line" : Document: Weak [
  attribute ID : Integer [constraints (PrimaryKey)]
  attribute invoiceID : Integer [constraints (NotNull ForeignKey (e_Invoice onDelete CASCADE))]
  attribute order "InvoiceLine Order" : Integer [constraints (NotNull)] 
  attribute productID : Integer [constraints (NotNull ForeignKey (e_Product onDelete PROTECT))]
  attribute quantity "Number of Itens" : Integer
  attribute productVAT : Decimal [constraints (Derived ("productID->VATCode->Value"))]
  attribute productPrice : Decimal [constraints (Derived ("productID->Value"))]
  attribute Value : Decimal [constraints (Derived ("quantity * productPrice"))]
  attribute ValueWithVAT : Decimal [constraints (Derived ("Value * (1+productVAT)"))]
  description "InvoiceLines"]
 
DataEntity e_ClosedInvoice "ClosedInvoice" : Transaction [
  attribute ID "Invoice ID" : Integer [constraints (PrimaryKey)]
  attribute customerID "Customer ID" : Integer [constraints (NotNull ForeignKey (e_Customer onDelete PROTECT))]
  attribute dateCreation "Creation Date" : Date [defaultValue "today" constraints (NotNull)]
  attribute dateApproval "Approval Date" : Date
  attribute datePaid "Payment Date" : Date
  attribute dateDeleted "Delete Date" : Date
  attribute totalValueWithoutVAT "Total Value Without VAT" : Decimal(16.2) [constraints (NotNull)]
  attribute totalValueWithVAT "Total Value With VAT" : Decimal(16.2) [constraints (NotNull) ]
  description "Closed Invoices, for Backup"]  

DataEntity e_User "User" : Master [
  attribute ID "ID" : Integer [constraints (PrimaryKey)]
  attribute login "Login" : Regex [constraints (NotNull Unique)]
  attribute password "Password" : Regex [constraints (NotNull Encrypted)]
  attribute firsName "First Name" : String [constraints (NotNull Encrypted)]
  attribute lastName "Last Name" : String [constraints (NotNull Encrypted)]
  attribute email "Email" : Email [constraints (Unique Encrypted)]
  attribute active "IsActive" : Boolean
  attribute userRole "User Role" : DataEnumeration UserRoleKind
  description "Users"]

/********************************************************
   DataEntityCluster view
*********************************************************/
View view_DataEntityClusters:
 UseCaseView [
    a_Admin,uc_1_1_CreateInvoice,uc_1_ManageInvoices
]

DataEntityCluster ec_User "Users" : Master [main e_User]
DataEntityCluster ec_Customer "Customers" : Master [main e_Customer description "ec_Customer" ]
DataEntityCluster ec_Product "Products" : Master [main e_Product uses e_VAT]
DataEntityCluster ec_Invoice "Invoices" : Document  [
  main e_Invoice
  child e_InvoiceLine [uses e_Product, e_VAT]
  uses e_Customer]
DataEntityCluster ec_Invoice_Simple "Invoices (Simple)" : Document [main e_Invoice uses e_Customer]


View view_DataEntites1: DataEntityView [e_Customer, e_CustomerVIP, e_Invoice, e_InvoiceLine, e_Product]
View view_DataEntites2: DataEntityView [e_User, e_Customer]



/********************************************************
   Data view
*********************************************************/
Data d_Product : e_Product := 
   [[ID,   Name,		VATCode, 	VATValue, 	Value ]
	[0001, "Product 1", 1, 			23%, 		100.99]
	[0002, "Product 2", 2, 			14%,  		1000  ]]

Data d_VAT : e_VAT := 
   [[Code,	Name,		Rate,		Value]
	[3, 	"Standard", "Standard", 23%	 ]
	[4, 	"Reduced" , "Reduced", 	13%	 ]
	[5, 	"Special" , "Special",	30%	 ]]

Data d1_Customer : e_Customer :=
   [[ID,   Name, 			fiscalID	 ]
	[0001, "Customer 4", 	"999 888 777"]
	[0002, "Customer 2",	"444 888 777"]]

Data d_Invoice : e_Invoice := 
   [[ID,	customer, creationDate,	Status,	 Value ]
	[0091, 	001, 	  12-5-2022, 	"Paid",	 100.99]
	[0092, 	001, 	  31-12-2022, 	"Issue", 100.99]]

Data d_InvoiceLine : e_InvoiceLine := 
   [[invoiceID, order,	productID, Value]
   	[0091,		2, 		0002,	   60.99]]
	[0091, 		1, 		0001, 	   40.00]




/********************************************************
   Actors view
*********************************************************/ 
 
View view_UserActors: ActorView [a_Admin, a_Manager, a_Operator, a_Customer]

ActorType OtherEvent "OtherEvent" 

Actor a_Admin "TechnicalAdmin" : User [stakeholder stk_sys_admin description "Manage Users, VAT, etc."]
Actor a_Manager "Manager" : User [description "Approve Invoices, etc."]
Actor a_Operator "Operator" : User [description "Manage Invoices and Customers"]
Actor a_Customer "Customer" : User [stakeholder stk_customer description "Receive Invoices to pay"]
Actor a_ERP "ERP" : ExternalSystem [description "Receive info of paid invoices"] 

/*
 * Requirements: UseCases
 */  

// Customer Actions
// For additional actions, see  StandardLibrary.Actions (StandardActions.rsl)

// Specific Customer Actions 
ActionType aSend_Invoice [description "Send Invoice to Customer via email"]
ActionType aExport_Invoices [description "Export a selected set of Invoices to a previously defined format, e.g. xlsx, json, rtf."]
ActionType aPrint_Invoice [description "Print an Invoice according a previously defined template"]
ActionType aPrint_Invoices [description "Print a selected list of Invoices according a previously defined template"]
ActionType aConfirmPayment [description "Confirm the Invoice's payment"]
ActionType aApprove [description "Approve Invoice"]
ActionType aReject [description "Do not Approve Invoice"]
ActionType aPrint_Customer [description "Print Customer Profile"]
ActionType aArchiveAndExportInvoices [description "Archive and Export Paid Invoices"]

   

UseCase uc_1_ManageInvoices "Manage Invoices" : EntitiesManage [ 
  primaryActor a_Operator   
  dataEntity ec_Invoice 
  extensionPoints xp_Create, xp_Update, xp_ConfirmPayment, xp_SendInvoices, xp_Print 
   
  mainScenario s0 (Main) "Happy Flow"   [  
    s1 (System) "Shows a list of Invoices and available actions, namely of CreateInvoice, UpdateInvoice, ..." 
    s2 (Actor) "Browse the list of Invoices and consult Invoices"  [
      scenario s2a (Alternative) "Filter invoices" [
        s1 (Actor) "Selects the option 'aFilter'"
        s2 (System) "Shows the filter options"
        s3 (Actor) "Sets the criteria to filter invoices"
        s4 (Actor) "Selects the option Filter"
        s5 (System) "Shows a list of invoices that satisfy the defined filter criteria" ]
      scenario s2b (Alternative) "Search invoices" [
        s1 (Actor) "Select the option aSearch"
        s2 (System) "Shows the search options"
        s3 (Actor) "Enters the search query"
        s4 (Actor) "Select the option Search"
        s5 (System) "Shows a list of invoices that satisfy the defined search criteria"] 
      scenario s2c (Alternative) "Select and unselect invoices" []
      scenario s2d (Alternative) "Create invoice" [
        s1 (Actor) "Selects the option CreateInvoice"  
        s2  (ExtendedBy uc_1_1_CreateInvoice) ]
      scenario s2e (Alternative) "Update invoice" [
        s1 (Actor) "Selects the option UpdateInvoice"
        s2 (ExtendedBy uc_1_2_UpdateInvoice) ] 
      scenario s2f (Alternative) "Send invoices" [
        s1 (Actor) "Selects the option SendInvoices "
        s2 (ExtendedBy uc_1_3_SendInvoices) ] ]  
    s3 (Actor) "Selects the option Close"
    s4 (System) "Shows the interaction space Home" ] ] 


UseCase uc_1_1_CreateInvoice "Create Invoice" : EntityCreate [ 
  primaryActor a_Operator 
  dataEntity ec_Invoice  
  actions aConfirm, aCancel  
  extensionPoints xp_CreateCustomer 
  extends uc_1_ManageInvoices onExtensionPoint xp_Create 
  
  mainScenario s0 (Main) "Happy Flow" [ 
    s1 (System) "Shows the interaction space CreateInvoice with empty fields and 
                      with the following actions: Confirm, Cancel, AddInvoiceLine, AddCustomer; 
                      by default, the invoice's creation date is filled with the current date, and the invoice�s id is filled with an auto-number."
    s2 (Actor) "Selects a customer" [
      scenario s2a (Alternative) "Customer does not exist and has to be created" [
        s1 (Actor) "Selects the action AddCustomer"
        s2 (ExtendedBy uc_1_6_CreateCustomer) ] ]
    s3 (System) "Shows the customer�s data, namely his full name and fiscal identification"
    s4 (Actor) "Creates one or more invoice lines" [
      scenario s4a (Nested) "Create Invoice Lines"   repeat "1..*" [ 
        s1 (Actor) "Selects the action AddInvoiceLine"
        s2 (Actor) "Selects a product and enters the quantity of itens"
        s3 (System) "Updates the InvoiceLine and Invoice values" ] ]
    s5 (Actor) "Selects the action Confirm"
    s6 (System) "Validates the submitted data" [
      scenario s6a (Exception) "Customer not yet selected" [
        s1 (System) "Check that a customer was not yet selected"
        s2 (System) "Displays an eror message" 
        nextStep s2]
      scenario s6b (Exception) "Invoice lines not yet added" [
        s1 (System) "Check that there is not at least one invoice line added"
        s2 (System) "Displays an eror message"
        nextStep s4] ]
    s7 (System) "Creates the Invoice information, which shall be in the �Pending� state" 
    s8 (System) "Displays a success message of �Invoice Created and Waiting for Approval�"  ] ]

 
UseCase uc_1_2_UpdateInvoice "Update Invoice" : EntityUpdate [
  primaryActor a_Operator
  dataEntity ec_Invoice
  actions aConfirm, aCancel
  extensionPoints xp_CreateCustomer
  extends uc_1_ManageInvoices onExtensionPoint xp_Update
  description "Update Invoice, including Invoice-lines, and optionally create customer "]

UseCase uc_1_3_SendInvoices "Send Invoices" : EntitiesInteropSendMessage [
  primaryActor a_Operator
  supportingActors a_Customer
  dataEntity ec_Invoice 
  actions aSend, aClose
  includes uc_1_4_PrintInvoice
  extends uc_1_ManageInvoices onExtensionPoint xp_SendInvoices 
 
  mainScenario s0 (Main) [ 
  s1 (System) "Shows the interaction space SendInvoices, namely with the following settings [�], and with available actions: Send, Cancel" 
  s2 (Actor) "Sets criteria to send invoices [...], namely shall select just one Customer and the respective Invoices to send"
  s3 (Actor) "Selects the action Send"
  s4 (System) "Validates the send criteria"
  s5 (System) "Creates an email message with all selected invoices" [
    scenario s5a (Nested) "Print and Attach Invoices" [ 
      s1 (Include uc_1_4_PrintInvoice) repeat "for each selected invoice"
      s2 (System) "Attach the printed PDF files into the email message" ] ]
  s6 (System) "Send email message to the Customer" 
  s7 (System) "Displays a success message of �Invoices Sent to the Customer�" ] ]

UseCase uc_1_4_PrintInvoice "Print Invoice" : EntityReport [
  primaryActor a_Operator
  dataEntity ec_Invoice
  precondition "Invoice.state in {'Approved', 'Issued', 'Paid'}"
  actions aPrint, aClose
  extends uc_1_ManageInvoices onExtensionPoint xp_Print
  description "Print Invoice/Receipt"]

UseCase uc_1_5_RegisterPayment "Register Payment" : EntityUpdate [
  primaryActor a_Operator
  dataEntity ec_Invoice
  precondition "Invoice.state in {'Issued'}"
  postcondition "Invoice.state := 'Paid'"
  actions aConfirm, aCancel
  extends uc_1_ManageInvoices onExtensionPoint xp_ConfirmPayment ]

UseCase uc_1_6_CreateCustomer "Create Customer (in the Invoice context)" : EntityCreate [
  primaryActor a_Operator
  dataEntity ec_Customer
  actions aConfirm, aCancel
  extends uc_1_1_CreateInvoice onExtensionPoint xp_CreateCustomer
  extends uc_1_2_UpdateInvoice onExtensionPoint xp_CreateCustomer
  description "Create Customer (in the scope of Invoice create or update)"

  mainScenario s0 (Main) "Happy Flow"   [ 
  s1 (System) "Shows the interaction space CreateCustomer, with empty fields, and with available actions (Confirm, Cancel); 
                      by default, the customer's creation date is filled with the current date"
  s2 (Actor) "Fills the customer fields [...]"
  s3 (Actor) "Select the action Confirm"
  s4 (System) "Validates the submitted data"
  s5 (System) "Creates the Customer information"
  s6 (System) "Shows the previous interaction space" ] ]


UseCase uc_2_ApproveInvoices "Approve Invoices" : EntitiesBrowse [
  primaryActor a_Manager
  dataEntity ec_Invoice  
  actions aClose, aSearch, aFilter
  extensionPoints xp_ApproveInvoice]

UseCase uc_2_1_ApproveInvoice "Consult and Approve Invoice" : EntityUpdate [
  primaryActor a_Manager
  dataEntity ec_Invoice
  precondition "Invoice.state in {'Pending'}"
  postcondition "Invoice.state = 'Approved' or 'Rejected'" 
  actions aApprove, aReject, aClose
  extends uc_2_ApproveInvoices onExtensionPoint xp_ApproveInvoice]


UseCase uc_3_ReceiveAlertOfInvoicesNotYetPaid "Alert Invoices Not Paid" : EntitiesInteropSendMessage [
  primaryActor a_Manager
  triggeredBy ev2_InvoiceNotPaid
  dataEntity ec_Invoice_Simple
  precondition "Invoice(s).state in {'Pending'}"
  actions aSend]

UseCase uc_4_ReceiveClosedInvoices  "Receive Closed Invoices": EntitiesInteropSendMessage [
  primaryActor a_ERP
  triggeredBy ev4_BeginningOfTheYear
  dataEntity ec_Invoice_Simple
  precondition "Invoice(s).state in {'Paid'}"
  actions aArchiveAndExportInvoices] 


UseCase uc_6_ManageCustomers "Manage Customers" : EntitiesManage [
  primaryActor a_Operator
  dataEntity ec_Customer
  actions aCreate, aRead, aUpdate, aDelete, aSearch, aFilter, aClose
  extensionPoints Print_Customer, Print_Customers]

UseCase uc_6_1_PrintCustomer "Print Customer Report" : EntityReport [
  primaryActor a_Operator
  dataEntity ec_Customer
  actions aPrint, aClose
  extends uc_6_ManageCustomers onExtensionPoint Print_Customer]

UseCase uc_6_2_PrintCustomers "Print Customers Report" : EntitiesReport [
  primaryActor a_Operator
  dataEntity ec_Customer
  actions aPrint, aClose
  extends uc_6_ManageCustomers onExtensionPoint Print_Customers]
